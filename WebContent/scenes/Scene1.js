// Generated by Phaser Editor v1.2.1

/**
 * Scene1.
 * @param {Phaser.Game} aGame The game.
 * @param {Phaser.Group} aParent The parent group. If not given the game world will be used instead.
 */
function Scene1(aGame, aParent) {
	Phaser.Group.call(this, aGame, aParent);

	/* --- pre-init-begin --- */

	// you can insert code here

	/* --- pre-init-end --- */

	var BG = this.game.add.sprite(0, 0, 'BG', null, this);
	BG.scale.setTo(1.011611846221028, 1.015214909017638);

	var player = this.game.add.sprite(640, 279, 'player', 0, this);
	player.animations.add('walk', [1, 2, 3, 2], 4, true);
	player.animations.add('idle', [0], 60, false);
	var player_attack = player.animations.add('attack', [4, 5, 4], 4, true);
	player_attack.killOnComplete = true;
	this.game.physics.arcade.enable(player);
	player.body.collideWorldBounds = true;

	var CollisionLayer = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	this.game.add.tileSprite(2048, 465, 384, 25, 'tiles', 'physics', CollisionLayer);

	this.game.add.tileSprite(384, 465, 1280, 25, 'tiles', 'physics', CollisionLayer);

	var Plat = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	this.game.add.tileSprite(2304, 465, 128, 93, 'tiles', '15', Plat);

	this.game.add.tileSprite(2048, 465, 256, 93, 'tiles', '14', Plat);

	this.game.add.tileSprite(384, 465, 1280, 97, 'tiles', '14', Plat);

	var Hazards = this.game.add.physicsGroup(Phaser.Physics.ARCADE, this);

	var spike1 = this.game.add.tileSprite(1664, 465, 384, 93, 'spikes', '11', Hazards);

	var roman = this.game.add.sprite(1408, 279, 'roman', 0, this);
	roman.animations.add('walk', [1, 2, 3, 2], 4, true);
	roman.animations.add('idle', [0], 4, false);
	this.game.physics.arcade.enable(roman);

	 // public fields

	this.fPlayer = player;
	this.fCollisionLayer = CollisionLayer;
	this.fPlat = Plat;
	this.fHazards = Hazards;
	this.fSpike1 = spike1;
	this.fRoman = roman;

	/* --- post-init-begin --- */

	// you can insert code here

	/* --- post-init-end --- */
}

/** @type Phaser.Group */
var Scene1_proto = Object.create(Phaser.Group.prototype);
Scene1.prototype = Scene1_proto;
Scene1.prototype.constructor = Phaser.Group;

/* --- end generated code --- */

// you can insert code here

